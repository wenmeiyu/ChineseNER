Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh


Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh


Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh



Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh


Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh




Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh




Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh




Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh



Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh


Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh

Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh


Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh


Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh

Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh


Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh


Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh


Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh


Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh


Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh


Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh


Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh


Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh

Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh

Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh


Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh
Evaluation Only. Created with Aspose.Words.
Copyright 2003-2018 Aspose Pty Ltd.
{{中核项目,[PROJECT]}}环境部署
应用程序更新
注：应用程序部署在100.1.9.48的服务器上，Redis,RabbitMq,
Oracle数据库部署在100.1.9.47的服务器上。（服务器端口22，密码：CNNC@gyw001）
应用程序更新
后端更新（包名：acm-cloud.tgz）
1. 将需要更新的程序包上传至48的服务器上
（因中核涉密机制，后端包传输时会先解压再压缩传输，到前置机上是包的后缀为acm-cloud.rar，这需要先将rar包解压，将解压后的文件夹传输到48服务器上:/home/data/）
2.在/home/data/acm-cloud/路径下压缩jar包执行命令：
tar  czvf  acm-cloud.tgz *jar
3.进入路径/home/tools/路径下：
移除旧的程序包：
rm  acm-cloud.tgz
将新的程序包移动至此路径下：
mv  /home/data/acm-cloud/acm-cloud.tgz  /home/tools/
4.执行脚本
执行脚本文件：
./publish-cldm_springcloud.sh

前端更新
移除旧的前端包：
cd /home/tools/acm_www.tgz
rm acm_www.tgz       (移除旧的前端包)
rm -rf acm_www		（移除旧的前端解压后文件）
将更新的前端包（acm_www.tgz）传到/home/tools/路径下 解压：
		tar -xvf acm_www.tgz
		编译运行：
		cd acm_www
		npm run build
		nohup npm run start&
		exit

Redis,RabbitMq重启
正常情况下Redis,RabbitMq不需要重新启动，当100.1.9.47服务器重启后，需重启redis ,mq
重启redis:切换到/usr/wisdom/redis/bin/路径下执行：
Redis-server /usr/wisdom/redis/etc/redis.conf
重启mq:systemctl restart rabbitmq-server.service



离线环境{{安装,[WBSL]}}部署
{{安装,[WBSL]}}jdk：
将jdk安装包(jdk-8u121-linux-x64.tar.gz)传输到应用服务器上
创建目录：
mkdir /usr/wisdom
解压jdk安装包：
tar -xzvf jdk-8u121-linux-x64.tar.gz
解压完成后，配置环境变量：
<1> 编辑profile文件：vi /etc/profile
<2> 在文件末尾添加：
JAVA_HOME=/usr/wisdom/jdk1.8.0_121
PATH=$JAVA_HOME/bin:$PATH
CLASSPATH=.:$JAVA_HOME/lib/tools.jar
export PATH JAVA_HOME CLASSPATH
 <3> 使用source /etc/profile让profile文件立即生效
 <4> 使用java -version验证是否{{安装,[WBSL]}}成功
在自带openjdk的情况下：
查看是否已有jdk： rpm -qa | grep jdk
yum -y remove java-1.4.2-gcj-compat-1.4.2.0-40jpp.115
gcc{{安装,[WBSL]}}：
将安装包上传到服务器执行：
rpm  -ivh  *.rpm --nodeps --force

3.{{安装,[WBSL]}}Redis：
.创建目录（在/usr/wisdom/下）：
mkdir /redis
2）.解压安装包：
 tar -xzvf redis-4.0.14.tar.gz
 Ln -s redis-4.0.14 reids
3）.进入解压包里，执行make对解压后的文件进行编译；
4）.编译成功后，进入src文件夹，执行make install进行Redis{{安装,[WBSL]}}
5).在/usr/wisdom/redis/目录下创建文件夹：bin,etc
6）.在/usr/wisdom/redis/redis-4.0.14下：
	   mv redis.conf etc/
cd src && mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server /usr/wisdom/redis/bin
.在etc目录下修改redis.conf文件，编辑redis.conf文件,
将daemonize属性改为yes（表明需要在后台运行）,
注释掉bind:127.0.0.1,将protected-mode属性改为no,其中requirepass foobared 属性为redis密码设置，foobared为密码，也可修改为别的值：
		vim redis.conf
切换到/usr/wisdom/redis/bin/目录下执行Redis-server 命令，使用/usr/wisdom/redis/etc/redis.conf 配置文件来启动Redis 服务	:

	Redis-server /usr/wisdom/redis/etc/redis.conf

9)服务端启动成功后，执行redis-cli启动Redis 客户端，查看端口号,默认是6379。

关闭防火墙：
sudo systemctl stop firewalld.service
sudo systemctl disable firewalld.service

查看进程
netstat -ntlp |grep 6379


4.{{安装,[WBSL]}}rabbitmq:
    1.安装包后执行命令：
rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm
rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm
rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm

解决User can only log in via localhost
找到这个文件rabbit.app
vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app
将：{loopback_users, [<<”guest”>>]}，
改为：{loopback_users, []}，
原因：rabbitmq从3.3.0开始禁止使用guest/guest权限通过除localhost外的访问

rabbitmq-server start &

查看进程：
ps -ef | grep rabbitmq

杀进程：
Kill 1258(具体数字看真实环境)

启动服务:
rabbitmq-server start &

启用默认插件
rabbitmq-plugins enable rabbitmq_management


重启mq
systemctl restart rabbitmq-server.service

guest/guest
 HYPERLINK "http://192.168.3.144:15672/" \l "/" http://192.168.3.144:15672/#/
参考资料
https://blog.csdn.net/weixin_34168880/article/details/88193395
https://blog.csdn.net/shenhonglei1234/article/details/82745601

前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
前端部署:
1.node.js 部署：
	1）将node-v10.16.0-linux-x64.tar传到服务器上
 	2）配置环境变量：
		vim  /etc/profile
		在文件末尾添加：
		# node
		export NODE_HOME=/usr/wisdom/node-v10.16.0-linux-x64
		export PATH=$NODE_HOME/bin:$PATH
		添加保存后执行：
		     source /etc/profile
		     node -v
2.前端项目打包：
	    ssh root@47.92.71.117
cd /data/wisdom/acm/nextjs
tar -zcf acm_www.tgz acm_www
acm_www.tgz发布到中核
3.编译发布：
 	    tar -xvf acm_www.tgz
cd acm_www
npm run build
npm run start

后端部署：
1.后端打包：
 	ssh  HYPERLINK "mailto:hadoop@192.168.3.11" hadoop@192.168.3.11
	cd 3rd/
	./publish-cldm_springcloud-zhonghe.sh
	将生成的acm_cloud.tgz发到服务器上/usr/wisdom/目录下
2.服务发布：
   	将脚本文件publish-cldm_springcloud.sh放到/usr/wisdom/目录下
	创建文件夹：mkdir data
	执行脚本：./publish-cldm_springcloud.sh


